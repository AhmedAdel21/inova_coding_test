// Mocks generated by Mockito 5.4.0 from annotations
// in inova_coding_test/test/test/domain/usecase/add_todo_task_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:inova_coding_test/app/error/failure.dart' as _i5;
import 'package:inova_coding_test/domain/repository/repository.dart' as _i3;
import 'package:inova_coding_test/presentation/ui/common/ui_models/ui_models.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Repository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepository extends _i1.Mock implements _i3.Repository {
  MockRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> initRepo() => (super.noSuchMethod(
        Invocation.method(
          #initRepo,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TrainingSeries>> getTrainingSeries() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTrainingSeries,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.TrainingSeries>>.value(
                _FakeEither_0<_i5.Failure, _i6.TrainingSeries>(
          this,
          Invocation.method(
            #getTrainingSeries,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.TrainingSeries>>);
}
